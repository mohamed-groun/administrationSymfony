<?php

namespace AppBundle\Repository;

/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersRepository extends \Doctrine\ORM\EntityRepository
{
    public function countNumberUsers($typeUsers=null)
    {
        return $this->createQueryBuilder('fc')
            ->select('count(fc.id) as somme')
            ->where('fc.poste = :typeUsers')->setParameter('typeUsers', $typeUsers)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function updateAutorisation( $heureAutorisation)
    {
        return $this->getEntityManager()
            ->createQuery(
                'update  AppBundle:Users p SET p.autorisation=:heure '
            )
            ->setParameter('heure', $heureAutorisation)

            ->getResult();
    }

    public function update2Autorisation($nom,$prenom,$heure)
    {
        return $this->getEntityManager()
            ->createQuery(
                'update  AppBundle:Users p SET p.autorisation=p.autorisation-:nbr where p.nom=:nom and p.prenom=:prenom'
            )

            ->setParameter('nbr', $heure)
            ->setParameter('nom', $nom)
            ->setParameter('prenom', $prenom)
            ->getResult();
    }

    public function updateCong($nom,$prenom,$nbr=0)
    {
        return $this->getEntityManager()
        ->createQuery(
            'update  AppBundle:Users p SET p.conge=p.conge-:nbr where p.nom=:nom and p.prenom=:prenom'
        )
        
        ->setParameter('nbr', $nbr) 
        ->setParameter('nom', $nom) 
        ->setParameter('prenom', $prenom) 
        ->getResult();
    }
    public function statsers()
    {

        return $this->createQueryBuilder('fc')
            ->select('fc.id, fc.nom,fc.prenom,fc.poste,SUM(fc.avis) as sommes')
            
            ->groupBy('fc.poste')
            ->getQuery()
            ->getScalarResult();
    }
	
	    public function updateTaux($dat)
    {
        return $this->getEntityManager()
        ->createQuery(
            'update  AppBundle:Users p SET p.conge=p.conge+p.taux , p.req=:dat'
        )
        ->setParameter('dat', $dat) 
        ->getResult();
    }
    public function selectdate()
    {

        return $this->createQueryBuilder('fc')
            ->select('fc.req')
            ->getQuery()
            ->getScalarResult();
    }
	    public function triUsers($deprt,$fonct,$niv,$site,$type)
    {
        return $this->createQueryBuilder('us')
            ->select('us')
            ->where('us.poste like :deprt')
            ->andwhere('us.niveau like :niv')
            ->andwhere('us.fonction like :fonct')
            ->andwhere('us.site like :site')
            ->andwhere('us.type_cont like :type')
            ->setParameter('deprt', '%'.$deprt.'%')
            ->setParameter('fonct', '%'.$fonct.'%')
            ->setParameter('niv', '%'.$niv.'%')
            ->setParameter('site', '%'.$site.'%')
            ->setParameter('type', '%'.$type.'%')
            ->getQuery()
            ->getResult();
    }
	public function getbirthday($now)
    {
        return $this->createQueryBuilder('fc')
            ->select('fc.nom, fc.prenom,fc.poste')
            ->where('fc.birthday like :dateB')
            ->setParameter('dateB', '%'.$now)
            ->getQuery()
            ->getResult();
    }
	    public function updateConge($nom,$prenom,$nbr=0)
    {
        return $this->getEntityManager()
        ->createQuery(
            'update  AppBundle:Users p SET p.conge=p.conge+:nbr where p.nom=:nom and p.prenom=:prenom'
        )
        
        ->setParameter('nbr', $nbr) 
        ->setParameter('nom', $nom) 
        ->setParameter('prenom', $prenom) 
        ->getResult();
    }

}
