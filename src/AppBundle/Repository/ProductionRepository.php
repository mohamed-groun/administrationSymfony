<?php

namespace AppBundle\Repository;

/**
 * ProductionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionRepository extends \Doctrine\ORM\EntityRepository
{
    public function statProd($d1=null,$d2=null,$super=null)
    {

        return $this->createQueryBuilder('fc')
            ->select('fc.id_prod, r.nom,r.prenom,r.poste,r.avatar,t.nomc,t.type ,fc.dateTache,  fc.superviseur, fc.dateDebut,
             fc.dateFin, SUM(fc.estime) as estime, SUM(fc.tempsPasse) as somme ')
            ->InnerJoin('fc.users', 'r')
            ->LEFTJOIN ('fc.clients', 't')
            ->groupBy('r.id')
            ->where('fc.dateTache >= :d1')
            ->andWhere('fc.dateTache <= :d2')
            ->andWhere('fc.superviseur = :superviseur')
            ->andWhere('t.type = :prod')
            ->setParameter('d1', $d1)     
            ->setParameter('d2', $d2)       
            ->setParameter('prod', "oui")  
            ->setParameter('superviseur', $super)        
            ->getQuery()
            ->getScalarResult();
    }

    public function statProds($d1,$d2)
    {
        return $this->createQueryBuilder('fc')
        ->select('fc.id_prod, r.nom,r.prenom,r.poste,r.avatar,t.nomc,t.type ,fc.dateTache,  fc.superviseur, fc.dateDebut,
        fc.dateFin, SUM(fc.estime) as estime, SUM(fc.tempsPasse) as somme ')
       ->InnerJoin('fc.users', 'r')
       ->LEFTJOIN ('fc.clients', 't')
       ->groupBy('r.id')
       ->where('fc.dateTache >= :d1')
       ->andWhere('fc.dateTache <= :d2')
       ->andWhere('t.type = :prod')
       ->setParameter('d1', $d1)     
       ->setParameter('d2', $d2)       
       ->setParameter('prod', "oui")  
       ->getQuery()
       ->getScalarResult();
    }
    

    public function tempProd($d1,$d2)
    {
        
        return $this->createQueryBuilder('fc')
        ->select('fc.id_prod, r.nom,r.prenom,r.poste,r.avatar,t.nomc,t.type ,fc.dateTache,  fc.superviseur, fc.dateDebut,
        fc.dateFin, SUM(fc.estime) as estime, SUM(fc.tempsPasse) as somme ')
       ->InnerJoin('fc.users', 'r')
       ->InnerJOIN ('fc.clients', 't')
       ->groupBy('r.id')

       ->getQuery()
       ->getScalarResult();
    }

    public function temPass($temppass,$idprod)
    {
        
        return $this->getEntityManager()
        ->createQuery(
            'update  AppBundle:Production p SET p.tempsPasse=:tempass where p.id_prod=:idprod '
        )
        ->setParameter('tempass', $temppass) 
        ->setParameter('idprod', $idprod) 
        ->getResult();
    }


    public function statClient($d1=null,$d2=null,$client=null)
    {

        return $this->createQueryBuilder('fc')
            ->select('fc.id_prod, r.nom,r.prenom,r.poste,r.avatar,t.nomc,t.type ,fc.dateTache, fc.dateDebut,
             fc.dateFin, SUM(fc.estime) as estime, SUM(fc.tempsPasse) as somme ')
            ->InnerJoin('fc.users', 'r')
            ->LEFTJOIN ('fc.clients', 't')
            ->groupBy('t.nomc')
            ->where('fc.dateTache >= :d1')
            ->andWhere('fc.dateTache <= :d2')
            ->andWhere('t.nomc = :client')
            ->andWhere('t.type = :prod')
            ->setParameter('d1', $d1)     
            ->setParameter('d2', $d2)       
            ->setParameter('prod', "oui")  
            ->setParameter('client', $client)        
            ->getQuery()
            ->getScalarResult();
    }
    public function statClients($d1=null,$d2=null)
    {

        return $this->createQueryBuilder('fc')
            ->select ('fc.id_prod, r.nom,r.prenom,r.poste,r.avatar,t.nomc,t.type ,fc.dateTache, fc.dateDebut,
             fc.dateFin, SUM(fc.estime) as estime, SUM(fc.tempsPasse) as somme ')
            ->InnerJoin('fc.users', 'r')
            ->LEFTJOIN ('fc.clients', 't')
            ->groupBy('t.nomc')
            ->where('fc.dateTache >= :d1')
            ->andWhere('fc.dateTache <= :d2')
            ->andWhere('t.type = :prod')
            ->setParameter('d1', $d1)     
            ->setParameter('d2', $d2)       
            ->setParameter('prod', "oui")  
            ->getQuery()
            ->getScalarResult();
    }

    
    public function emplDispo()
    {

        return $this->createQueryBuilder('fc')
            ->select('fc.id_prod,  r.nom,r.prenom')
            ->InnerJoin('fc.users', 'r')
            ->where('fc.tempsPasse is not null')
            ->groupBy('r.nom')
            ->getQuery()
            ->getScalarResult();
    }
}
